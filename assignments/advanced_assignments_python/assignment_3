The concept of an abstract superclass is to provide a common structure and behavior to its subclasses, without being instantiated itself. For example, a Shape class can be an abstract superclass that defines properties such as color and size, but cannot be instantiated on its own.
When a class statement's top level contains a basic assignment statement, a class attribute is created with the assigned value. For example, if we define a class Car and assign a variable 'wheels' to it with a value of 4, then every instance of the Car class will have an attribute called 'wheels' with a value of 4.
A class needs to manually call a superclass's init method in order to inherit and initialize its attributes and behavior. Without calling the superclass's init method, the subclass will not have access to the attributes and behavior defined in the superclass.
You can augment an inherited method by using the 'super()' function to call the method from the superclass, and then adding your own code to it. For example, if you have a class Animal with a method 'eat()', you can define a subclass Dog that inherits 'eat()', and then add additional behavior to it by calling 'super().eat()' and then adding more code.
The local scope of a class is different from that of a function in that it includes not only the attributes and methods defined within the class, but also any inherited attributes and methods from its superclass(es). In addition, the class scope persists even after an instance of the class is created, whereas a function's local scope is destroyed once the function returns.
